import java.util.*;
class Node
{
    int data;
    Node left,right;
    Node(int data)
    {
        this.data=data;
        left=null;
        right=null;
    }
}
class Pair
{
    Node key;
    int value;
    Pair(Node key,int value)
    {
        this.key=key;
        this.value=value;
    }
}
public class Tree
{
    Node root;
    void topView(Node node)
    {
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(node,0));
        TreeMap<Integer,Integer> tm=new TreeMap<>();
        while(!q.isEmpty())
        {
            Pair p=q.poll();
            Node temp=p.key;
            int vl=p.value;
            if(!tm.containsKey(vl))
              tm.put(vl,temp.data);
            if(temp.left!=null)
              q.add(new Pair(temp.left,vl-1));
            if(temp.right!=null)
              q.add(new Pair(temp.right,vl+1));
        }
        for(Map.Entry<Integer,Integer> entry: tm.entrySet())
        {
            System.out.println(entry.getKey()+"-->"+entry.getValue());
        }
    }
    void bottomView(Node node)
    {
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(node,0));
        TreeMap<Integer,Integer> tm=new TreeMap<>();
        while(!q.isEmpty())
        {
            Pair p=q.poll();
            Node temp=p.key;
            int vl=p.value;
            tm.put(vl,temp.data);
            if(temp.left!=null)
              q.add(new Pair(temp.left,vl-1));
            if(temp.right!=null)
              q.add(new Pair(temp.right,vl+1));
        }
        for(Map.Entry<Integer,Integer> entry: tm.entrySet())
        {
            System.out.println(entry.getKey()+"-->"+entry.getValue());
        }
    }
    public static void main(String args[])
    {
        Tree tree=new Tree();
        tree.root=new Node(1);
        tree.root.left=new Node(2);
        tree.root.right=new Node(3);
        tree.root.left.left=new Node(4);
        tree.root.left.right=new Node(5);
        tree.root.left.right.left=new Node(6);
        tree.root.right.right=new Node(7);
        System.out.println("Top View:");
        tree.topView(tree.root);
        System.out.println("Bottom View:");
        tree.bottomView(tree.root);
    }
}
