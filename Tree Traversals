import java.util.*;
class Node
{
    int data;
    Node left,right;
    Node(int data)
    {
        this.data=data;
        left=null;
        right=null;
    }
}
public class Tree
{
    Node root;
    void inorder(Node node)
    {
        if(node==null)
          return;
        inorder(node.left);
        System.out.print(node.data+" ");
        inorder(node.right);
    }
    void preorder(Node node)
    {
        if(node==null)
          return;
        System.out.print(node.data+" ");
        preorder(node.left);
        preorder(node.right);
    }
    void postorder(Node node)
    {
        if(node==null)
          return;
        postorder(node.left);
        postorder(node.right);
        System.out.print(node.data+" ");
    }
    void levelorder(Node node)
    {
        if(node==null)
          return;
        Queue<Node> q=new LinkedList<>();
        q.add(node);
        while(!q.isEmpty())
        {
            Node temp=q.poll();
            System.out.print(temp.data+" ");
            if(temp.left!=null)
              q.add(temp.left);
            if(temp.right!=null)
              q.add(temp.right);
        }
    }
    public static void main(String args[])
    {
        Tree tree=new Tree();
        tree.root=new Node(1);
        tree.root.left=new Node(2);
        tree.root.right=new Node(3);
        tree.root.left.left=new Node(4);
        tree.root.left.right=new Node(5);
        tree.root.right.left=new Node(6);
        tree.inorder(tree.root);//LRR(Left,Root,Right)
        System.out.println();
        tree.preorder(tree.root);//RLR(Root,Left,Right)
        System.out.println();
        tree.postorder(tree.root);//LRR(Left,Right,Root)
        System.out.println();
        tree.levelorder(tree.root);
    }
}
