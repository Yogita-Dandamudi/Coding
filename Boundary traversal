import java.util.*;
class Node
{
    int data;
    Node left,right;
    Node(int data)
    {
        this.data=data;
        left=null;
        right=null;
    }
}
public class Tree
{
    Node root;
    void addLeftBoundary(Node node,ArrayList<Integer> arr)
    {
        if(node==null)
          return;
        while(node!=null)
        {
            if(isLeaf(node)==false)
               arr.add(node.data);
            if(node.left!=null)
               node=node.left;
            else
               node=node.right;
        }
    }
    void addLeaf(Node node,ArrayList<Integer> arr)
    {
        if(isLeaf(node))
        {
          arr.add(node.data);
          return;
        }
        if(node.left!=null)
          addLeaf(node.left,arr);
        if(node.right!=null)
          addLeaf(node.right,arr);
    }
    void addRightBoundary(Node node,ArrayList<Integer> arr)
    {
        Stack<Node> st=new Stack<>();
        while(node!=null)
        {
            if(isLeaf(node)==false)
              st.add(node);
            if(node.right!=null)
                node=node.right;
            else
                node=node.left;
        }
        while(!st.isEmpty())
          arr.add(st.pop().data);
    }
    boolean isLeaf(Node node)
    {
        if(node.left==null && node.right==null)
          return true;
        return false;
    }
    
    ArrayList<Integer> printBoundary(Node node)
    {
        ArrayList<Integer> arr=new ArrayList<>();
        addLeftBoundary(node,arr);
        addLeaf(node,arr);
        addRightBoundary(node,arr);
        return arr;
    }
    public static void main(String args[])
    {
        Tree tree=new Tree();
        tree.root=new Node(1);
        tree.root.left=new Node(2);
        tree.root.right=new Node(3);
        tree.root.left.left=new Node(4);
        tree.root.left.right=new Node(5);
        tree.root.left.right.left=new Node(6);
        tree.root.left.right.right=new Node(7);
        System.out.println(tree.printBoundary(tree.root));
    }
}
